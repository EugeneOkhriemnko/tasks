# v2.0.0
name: Demo manager CI

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/**'
      - '.deployment/**'
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
    branches: [ main ]

jobs:
  CI:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      VERSION_SUFFIX: ''
      ARTIFACT_URL: ''
      GITHUB_USER: '${{ github.repository_owner }}'
      PACKAGE_SERVER: 'ghcr.io'
      DEMO_MANAGER_CONTAINER: 'platform-demo-manager'
      UI_KIT_CONTAINER: 'platform-ui-kit'

    outputs:
      managerArtifactUrl: '${{ env.ARTIFACT_URL_DM }}'
      UiKitArtifactUrl: '${{ env.ARTIFACT_URL_UK }}'

    steps:
    - name: Set GITHUB_USER to lowercase
      run: |
        echo "GITHUB_USER=${GITHUB_USER,,}" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Install dependencies
      run: |
        npm install
    - name: Get Image Version
      uses: VirtoCommerce/vc-github-actions/get-image-version@master
      id: image
      with:
        projectType: theme

    - name: Set release variables
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.prefix }}" >> $GITHUB_ENV
    - name: Set release-alpha variables
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.fullVersion }}" >> $GITHUB_ENV
    - name: Set PR variables
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.taggedVersion }}" >> $GITHUB_ENV
    - name: Set ARTIFACT_URL_DM
      run: |
        echo "ARTIFACT_URL_DM=${{ env.PACKAGE_SERVER }}/${{ env.GITHUB_USER }}/${{ env.DEMO_MANAGER_CONTAINER }}:${{ env.VERSION_SUFFIX }}" >> $GITHUB_ENV
    - name: Set ARTIFACT_URL_UK
      run: |
        echo "ARTIFACT_URL_UK=${{ env.PACKAGE_SERVER }}/${{ env.GITHUB_USER }}/${{ env.UI_KIT_CONTAINER }}:${{ env.VERSION_SUFFIX }}" >> $GITHUB_ENV
    - name: Build platform-manager-demo
      run: |
        npm run build
    - name: Build platform-manager-ui docs
      run: |
        npm run storybook-build
    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.PACKAGE_SERVER }}
        username: $GITHUB_ACTOR
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Publish Docker Image For Platform Manager Demo
      run: |
          docker build ${{ github.workspace }} --tag ${{ env.ARTIFACT_URL_DM }} -f .dockerfiles/platform-manager-demo/Dockerfile.demo
          docker push ${{ env.ARTIFACT_URL_DM }}
    - name: Build and Publish Docker Image For Platform Manager UI Docs
      run: |
          docker build ${{ github.workspace }} --tag ${{ env.ARTIFACT_URL_UK }} -f .dockerfiles/platform-manager-ui/Dockerfile.demo
          docker push ${{ env.ARTIFACT_URL_UK }}
    - name: CI results
      run: |
          echo "Project $GITHUB_REPOSITORY successfully build and published to $ARTIFACT_URL_DM and $ARTIFACT_URL_UK"

  CD_Demo_manager:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch' }}
    needs: CI
    strategy:
      matrix:
        include:
          - envName: 'dev'
            deployConfigPath: '.deployment/demoManager/argoDeploy-marketplace.json'
          - envName: 'prod'
            deployConfigPath: '.deployment/demoManager/argoDeploy-platform-dev.json'

    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      ARGO_SERVER: 'argo.govirto.com'

    steps: 

    - name: Read deployment config
      uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
      id: deployConfig
      with:
        envName: ${{ matrix.envName }}
        deployConfigPath: ${{ matrix.deployConfigPath }}

    - name: Start deployment
      uses: bobheadxi/deployments@master
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: Development
        no_override: false

    - name: Update deployment-cm
      uses: VirtoCommerce/vc-github-actions/create-deploy-pr@master
      with:
        deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
        deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
        artifactKey: ${{ steps.deployConfig.outputs.artifactKey }}
        artifactUrl: ${{ needs.CI.outputs.managerArtifactUrl }}
        taskNumber: "undefined"
        forceCommit: "true"
        cmPath: ${{ steps.deployConfig.outputs.cmPath }}

    - name: Wait for environment is up
      if: ${{ matrix.envName }} == 'dev'
      uses: VirtoCommerce/vc-github-actions/vc-argocd-cli@master
      id: argocd-cli
      with:
        server: ${{env.ARGO_SERVER}}
        username: ${{ secrets.ARGOCD_LOGIN }}
        password: ${{ secrets.ARGOCD_PASSWORD }}
        command: app wait ${{ steps.deployConfig.outputs.deployAppName }}

    - name: BUILD_STATE::successful
      if: success()
      run: echo "BUILD_STATE=successful" >> $GITHUB_ENV

    - name: BUILD_STATE::failed
      if: failure()
      run: echo "BUILD_STATE=failed"  >> $GITHUB_ENV

    - name: Update GitHub deployment status
      uses: bobheadxi/deployments@master
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  CD_UI_kit:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch' }}
    needs: CI
    strategy:
      matrix:
        include:
          - envName: 'prod'
            deployConfigPath: '.deployment/UIKit/argoDeploy-platform-dev.json'

    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      ARGO_SERVER: 'argo.govirto.com'

    steps: 

    - name: Read deployment config
      uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
      id: deployConfig
      with:
        envName: ${{ matrix.envName }}
        deployConfigPath: ${{ matrix.deployConfigPath }}

    - name: Start deployment
      uses: bobheadxi/deployments@master
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: Development
        no_override: false

    - name: Update deployment-cm
      uses: VirtoCommerce/vc-github-actions/create-deploy-pr@master
      with:
        deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
        deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
        artifactKey: ${{ steps.deployConfig.outputs.artifactKey }}
        artifactUrl: ${{ needs.CI.outputs.UIKitArtifactUrl }}
        taskNumber: "undefined"
        forceCommit: "true"
        cmPath: ${{ steps.deployConfig.outputs.cmPath }}

    - name: Wait for environment is up
      if: ${{ matrix.envName }} == 'dev'
      uses: VirtoCommerce/vc-github-actions/vc-argocd-cli@master
      id: argocd-cli
      with:
        server: ${{env.ARGO_SERVER}}
        username: ${{ secrets.ARGOCD_LOGIN }}
        password: ${{ secrets.ARGOCD_PASSWORD }}
        command: app wait ${{ steps.deployConfig.outputs.deployAppName }}

    - name: BUILD_STATE::successful
      if: success()
      run: echo "BUILD_STATE=successful" >> $GITHUB_ENV

    - name: BUILD_STATE::failed
      if: failure()
      run: echo "BUILD_STATE=failed"  >> $GITHUB_ENV

    - name: Update GitHub deployment status
      uses: bobheadxi/deployments@master
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
